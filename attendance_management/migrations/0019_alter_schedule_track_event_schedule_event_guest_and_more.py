# Generated by Django 5.2 on 2025-05-12 10:28

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('attendance_management', '0018_remove_session_track'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='schedule',
            name='track',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='attendance_management.track'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('audience_type', models.CharField(choices=[('students_only', 'Students Only'), ('guests_only', 'Guests Only'), ('both', 'Students and Guests')], default='students_only', max_length=20)),
                ('is_mandatory', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target_tracks', models.ManyToManyField(blank=True, help_text='Specific tracks that can attend this event. Leave empty for all tracks.', related_name='events', to='attendance_management.track')),
            ],
        ),
        migrations.AddField(
            model_name='schedule',
            name='event',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedule', to='attendance_management.event'),
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid 14-digit national ID.', regex='^\\d{14}$')])),
                ('college_name', models.CharField(blank=True, max_length=255, null=True)),
                ('university_name', models.CharField(blank=True, max_length=255, null=True)),
                ('gradyear', models.DateField(blank=True, null=True)),
                ('degree_level', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='guest_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GuestEventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='attendance_management.event')),
                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='attendance_management.guest')),
            ],
        ),
        migrations.AddField(
            model_name='guest',
            name='event',
            field=models.ManyToManyField(blank=True, help_text='Events that this guest can attend.', related_name='guests', through='attendance_management.GuestEventRegistration', to='attendance_management.event'),
        ),
        migrations.CreateModel(
            name='EventAttendanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('attended', 'Attended'), ('absent', 'Absent')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendance_records', to='attendance_management.schedule')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_attendance_records', to='attendance_management.student')),
                ('guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_attendance_records', to='attendance_management.guest')),
            ],
            options={
                'indexes': [models.Index(fields=['check_in_time'], name='attendance__check_i_00fc6f_idx'), models.Index(fields=['check_out_time'], name='attendance__check_o_c91fc7_idx'), models.Index(fields=['status'], name='attendance__status_0c67af_idx'), models.Index(fields=['created_at'], name='attendance__created_9466d1_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('guest__isnull', True), ('student__isnull', False)), models.Q(('guest__isnull', False), ('student__isnull', True)), _connector='OR'), name='event_attendance_either_student_or_guest'), models.UniqueConstraint(condition=models.Q(('student__isnull', False)), fields=('schedule', 'student'), name='unique_student_event_attendance'), models.UniqueConstraint(condition=models.Q(('guest__isnull', False)), fields=('schedule', 'guest'), name='unique_guest_event_attendance')],
            },
        ),
        migrations.AddIndex(
            model_name='guesteventregistration',
            index=models.Index(fields=['registration_date'], name='attendance__registr_20df2f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='guesteventregistration',
            unique_together={('guest', 'event')},
        ),
    ]
